# Terraform Provider release workflow.
name: Release

# This GitHub action creates a release when a tag that matches the pattern
# "v*" (e.g. v0.1.0) is created.
on:
  push:
    tags:
      - 'v*'

# Releases need permissions to read and write the repository contents.
# GitHub considers creating releases and uploading assets as writing contents.
permissions:
  contents: write

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          # Allow goreleaser to access older tag information.
          fetch-depth: 0
      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: 'go.mod'
          cache: true
      - uses: actions/setup-terraform@e8b75947f4f5f79c21d52.2 # v4.0.0
        with:
          terraform_version: "1.5.0"
      - name: Build and Test
        run: |
          go build -o terraform-provider-kind ./main.go
          go test ./...
          echo "Build and tests completed successfully"
      - name: Generate Documentation
        run: |
          go generate ./...
          echo "Documentation generated successfully"
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@e89d40939c28e39f97cf32126055eeae86ba74ec # v6.3.0
        id: import_gpg
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@e435ccd777264be153ace6237001ef4d979d3a7a # v6.4.0
        with:
          args: release --clean
        env:
          # GitHub sets the GITHUB_TOKEN secret automatically.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          # Ensure GPG signing is enabled
          GPG_KEY_ID: ${{ steps.import_gpg.outputs.fingerprint }}
      - name: Verify Release Assets
        run: |
          echo "Verifying release assets..."
          # Check if checksums.txt exists and is signed
          if [ -f "dist/checksums.txt" ]; then
            echo "✓ checksums.txt found"
            if [ -f "dist/checksums.txt.sig" ]; then
              echo "✓ checksums.txt.sig found"
            else
              echo "✗ checksums.txt.sig missing"
              exit 1
            fi
          else
            echo "✗ checksums.txt missing"
            exit 1
          fi
          
          # Verify GPG signature
          gpg --verify dist/checksums.txt.sig dist/checksums.txt
          echo "✓ GPG signature verified"
